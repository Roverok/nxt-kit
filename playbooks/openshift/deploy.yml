---
- name: move nxt-kit to new folder
  hosts: openshifts
  gather_facts: no
  vars:
    nxt_local_folder: ~/nxt-kit
    nxt_remote_folder: ~/app-root/data/nxt-kit
    nxt_cron_path: ~/app-root/runtime/repo/.openshift/cron/minutely
  tasks:
  - name: uncron check script
    file: path="{{ nxt_cron_path }}/check.nxt.sh" state=absent
  - name: kill check script
    shell: pkill -f 'check.nxt.sh'
    ignore_errors: yes
  - name: previous installation exists
    stat: path="{{ nxt_remote_folder }}"
    register: p
  - name: remote runs previous version of nxt-kit
    shell: /bin/true
    when: p.stat.isdir is defined and p.stat.isdir == true
    notify:
    - kill old nxt
    - kill and wait nxt
    - move folder
  handlers:
    - name: kill old nxt
      shell: pkill -f 'java \-jar start.jar'
      ignore_errors: yes
    - name: kill and wait nxt
      shell: while pgrep -f nxt.jar > /dev/null; do sleep 1; pkill -f 'nxt.jar'; done
      ignore_errors: yes
    - name: move folder
      shell: mv {{ nxt_remote_folder }} {{ nxt_remote_folder }}-deployed

- name: break default app on 8080 port
  hosts: openshifts
  gather_facts: no
  tasks:
  - name: kill it
    shell: pkill ruby
    ignore_errors: yes
  - name: prevent it from starting again
    shell: rm -f "$OPENSHIFT_REPO_DIR/diy/testrubyserver.rb"

- name: update nxt
  hosts: openshifts
  gather_facts: no
  vars:
    nxt_local_folder: ~/nxt-kit
    nxt_remote_folder: ~/app-root/data/nxt-kit-deployed
    nxt_cron_path: ~/app-root/runtime/repo/.openshift/cron/minutely
    nxt_is_stable_flag: "is-stable"
    hallmark_date: "2013-12-11"
    hallmark_weight: 100
    kit_peerServerPort: 8080
    kit_announcedPort: 80
    kit_apiServerPort: 27876
    kit_uiServerPort: 27875
  vars_prompt:
    - name: "secret_phrase"
      prompt: "secret phrase for hallmarking [if empty hallmark is taken from `hallmark_predef` host variable]"
      default: ""
      private: yes
  tasks:
  - name: check remote folders
    file: path={{ item }} state=directory mode=0744
    with_items:
      - "{{ nxt_remote_folder }}"
      - "{{ nxt_remote_folder }}/distrib"
      - "{{ nxt_cron_path }}"
  - name: uncron check script
    file: path="{{ nxt_cron_path }}/check.nxt.sh" state=absent
  - name: kill check script
    shell: pkill -f 'check.nxt.sh'
    ignore_errors: yes
  - name: calculate local md5
    local_action: shell /usr/bin/md5sum {{ nxt_local_folder }}/distrib/{{ item }} | awk '{print $1;}'
    with_items:
      - "chain-original.tar.gz"
      - "nxt.zip"
    changed_when: false
    register: localmd5
  - name: calculate remote md5
    shell: /usr/bin/md5sum {{ nxt_remote_folder }}/distrib/{{ item }} | awk '{print $1;}'
    with_items:
      - "chain-original.tar.gz"
      - "nxt.zip"
    changed_when: false
    register: remotemd5
  - name: copy original chain
    copy: src={{ nxt_local_folder }}/distrib/chain-original.tar.gz dest={{ nxt_remote_folder }}/distrib
    when: localmd5.results[0].stdout != remotemd5.results[0].stdout and localmd5.results[0].stdout != ""
  - name: previous installation was successful
    stat: path="{{ nxt_remote_folder ~ '/' ~ nxt_is_stable_flag }}"
    register: p
  - name: remote runs different version
    shell: /bin/true
    when: localmd5.results[1].stdout != remotemd5.results[1].stdout or not p.stat.exists
    notify:
    - mark installation unstable
    - generate hallmark
    - kill old nxt
    - kill and wait nxt
    - copy lastest distrib
    - unpack new version
    - set IP
    - setup properties
    - mark installation stable
  handlers:
    - name: mark installation unstable
      file: path="{{ nxt_remote_folder ~ '/' ~ nxt_is_stable_flag }}" state=absent
    - name: generate hallmark
      local_action: command wget -qO- "http://127.0.0.1:7876/nxt" --post-data="requestType=markHost&secretPhrase={{ secret_phrase|urlencode }}&host={{ inventory_hostname }}&weight={{ hallmark_weight }}&date={{ hallmark_date }}"
      register: hallmark_result
      when: secret_phrase != ""
    # Obsolete and will be removed
    - name: kill old nxt
      shell: pkill -f 'java \-jar start.jar'
      ignore_errors: yes
    - name: kill and wait nxt
      shell: while pgrep -f nxt.jar > /dev/null; do sleep 1; pkill -f 'nxt.jar'; done
      ignore_errors: yes
    - name: copy lastest distrib
      copy: src={{ nxt_local_folder }}/distrib/nxt.zip dest={{ nxt_remote_folder }}/distrib
      when: localmd5.results[1].stdout != remotemd5.results[1].stdout
    - name: unpack new version
      shell: cd {{ nxt_remote_folder }} && rm -rf nxt && unzip distrib/nxt.zip
    - name: set IP
      shell: echo $OPENSHIFT_DIY_IP
      register: kit_ServerHost
    - name: setup properties
      template: src={{ nxt_local_folder }}/templates/nxt.properties.j2 dest={{ nxt_remote_folder }}/nxt/conf/nxt.properties
    - name: mark installation stable
      shell: "echo `date` > {{ nxt_remote_folder ~ '/' ~ nxt_is_stable_flag }}"

- name: ensure check script @ cron
  hosts: openshifts
  gather_facts: no
  vars:
    nxt_local_folder: ~/nxt-kit
    nxt_remote_folder: ~/app-root/data/nxt-kit-deployed
    nxt_cron_path: ~/app-root/runtime/repo/.openshift/cron/minutely
    kit_apiServerPort: 27876
  tasks:
  - name: set IP
    shell: echo $OPENSHIFT_DIY_IP
    register: kit_ServerHost
  - name: cron
    template: src={{ nxt_local_folder }}/scripts-src/check.sh dest={{ nxt_cron_path }}/check.nxt.sh mode=0744
  - name: set check every 10 minutes
    shell: sed -i '2i if (( $(date "+%M") % 10 )); then exit 0; fi' {{ nxt_cron_path }}/check.nxt.sh
  - name: remove sleep
    shell: sed -i '/sleep/d' {{ nxt_cron_path }}/check.nxt.sh
  - name: remove unsupported anti-parallel execution workaround
    shell: sed -i '/pidof/d' {{ nxt_cron_path }}/check.nxt.sh
